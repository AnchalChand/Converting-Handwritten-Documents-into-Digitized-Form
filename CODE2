# Importing Python libraries
import csv
import cv2
import pytesseract

# This module is imported so that we can play the converted audio
import os
from gtts import gTTS

from pytesseract import Output

pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'

def parse_text(threshold_img):
    """
    This function take one argument as input. 
    This function will feed input image to tesseract to predict text.
    :param threshold_img: image
    return: meta-data dictionary
    """
    
    # configuring parameters for tesseract
    tesseract_config = r'--oem 3 --psm 6'
    # now feeding image to tesseract
    details = pytesseract.image_to_data(threshold_img, output_type=pytesseract.Output.DICT,config=tesseract_config, lang='eng')
    return details

def draw_boxes(image, details, threshold_point):
    """
    This function takes three argument as input. 
    It draw boxes on text area detected by Tesseract. 
    It also writes resulted image to your local disk so that you can view it.
    :param image: image
    :param details: dictionary
    :param threshold_point: integer
    :return: None
    """
    total_boxes = len(details['text'])
    for sequence_number in range(total_boxes):
        if float(details['conf'][sequence_number]) > threshold_point:
            (x, y, w, h) = (details['left'][sequence_number], details['top'][sequence_number],
                            details['width'][sequence_number], details['height'][sequence_number])
            image = cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
            
    # saving image to local
    cv2.imwrite('captured_text_area.png', image)
    
    # display image
    cv2.imshow('captured text', image)
    
    # Maintain output window until user presses a key
    cv2.waitKey(0)
    
    # Destroying present windows on screen
    cv2.destroyAllWindows()

def format_text(details):
    """
    This function take one argument as input.
    This function will arrange resulted text into proper format.
    :param details: dictionary
    :return: list
    """
    parse_text = []
    word_list = []
    last_word = ''
    for word in details['text']:
        if word != '':
            word_list.append(word)
            last_word = word
        if (last_word != '' and word == '') or (word == details['text'][-1]):
            parse_text.append(word_list)
            word_list = []

    return parse_text

def write_text(formatted_text):
    """
    This function take one argument.
    It will write arranged text into a file.
    :param formatted_text: list
    :return: None
    """
    with open('resulted_text.txt', 'w', newline="") as file:
        csv.writer(file, delimiter=" ").writerows(formatted_text)

if __name__ == "__main__":
    display = cv2.imread(r"C:\Users\ancha\Desktop\deep learning 6th sem mini project\check images\1.jpeg")
    cv2.imshow('Used image', display)
    cv2.waitKey()
    cv2.destroyAllWindows()
    
    gray_image= cv2.cvtColor(cv2.imread(r"C:\Users\ancha\Desktop\deep learning 6th sem mini project\check images\1.jpeg"), cv2.COLOR_BGR2GRAY)
 
    # using thresholding technique
    threshold_img = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    
    # saving image to view threshold image
    cv2.imwrite('thresholded.png', threshold_img)
    cv2.imshow('threshold image', threshold_img)
    
    # Maintain output window until user presses a key
    cv2.waitKey(0)
    
    # Destroying present windows on screen
    cv2.destroyAllWindows()

    # calling parse_text function to get text from image by Tesseract.
    parsed_data = parse_text(threshold_img)
    # defining threshold for draw box
    accuracy_threshold = 30
    # calling draw_boxes function which will draw dox around text area.
    draw_boxes(threshold_img, parsed_data, accuracy_threshold)
    # calling format_text function which will format text according to input image
    arranged_text = format_text(parsed_data)
    # calling write_text function which will write arranged text into file
    write_text(arranged_text)

    #reading text from the saved file
    with open("resulted_text.txt","r") as readfile:
        a = readfile.read()
        lines = a.split("\n")
        for line in lines:
            print(line)
            
# Passing the text and language to the engine
language = 'en'
var_audio = open("resulted_text.txt", "r")
myText = var_audio.read().replace("\n"," ")
myobj = gTTS(text=myText, lang='hi', slow=False)

# Saving the converted audio in a mp3 file named welcome
myobj.save("welcome.mp3")
var_audio.close()
# Playing the converted file
os.system("start welcome.mp3")

#################################################################################################
#################################################################################################
#################################################################################################
